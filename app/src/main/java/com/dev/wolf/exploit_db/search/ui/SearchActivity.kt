package com.dev.wolf.exploit_db.search.ui

import android.content.Context
import android.content.Intent
import android.os.Bundle
import androidx.appcompat.widget.SearchView
import androidx.core.graphics.Insets
import androidx.core.view.updatePadding
import androidx.fragment.app.commit
import com.dev.wolf.exploit_db.R
import com.dev.wolf.exploit_db.base.BaseActivity
import com.dev.wolf.exploit_db.databinding.ActivitySearchBinding
import com.dev.wolf.exploit_db.search.ui.suggestion.SearchSuggestionViewModel
import com.dev.wolf.exploit_db.utils.ext.showKeyboard
import org.koin.androidx.viewmodel.ext.android.viewModel

class SearchActivity : BaseActivity<ActivitySearchBinding>(), SearchView.OnQueryTextListener {

    private val searchSuggestionViewModel by viewModel<SearchSuggestionViewModel>(
        mode = LazyThreadSafetyMode.NONE
    )

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(ActivitySearchBinding.inflate(layoutInflater))
        val query = intent.getStringExtra(EXTRA_QUERY)
        supportActionBar?.setDisplayHomeAsUpEnabled(true)
        with(binding.searchView) {
            //queryHint = getString(R.string.search_on_s, source.title)
            setOnQueryTextListener(this@SearchActivity)

            if (query.isNullOrBlank()) {
                requestFocus()
                showKeyboard()
            } else {
                setQuery(query, true)
            }
        }
    }

    override fun onWindowInsetsChanged(insets: Insets) {
        binding.toolbar.updatePadding(
            top = insets.top,
            left = insets.left,
            right = insets.right
        )
    }

    override fun onQueryTextSubmit(query: String?): Boolean {
        val q = query?.trim()
        if (q.isNullOrEmpty()) {
            return false
        }
        title = query
        supportFragmentManager.commit {
            replace(R.id.container, SearchFragment.newInstance(q))
        }
        binding.searchView.clearFocus()
        searchSuggestionViewModel.saveQuery(q)
        return true
    }

    override fun onQueryTextChange(newText: String?): Boolean = false

    companion object {
        private const val EXTRA_QUERY = "query"

        fun newIntent(context: Context, query: String?) =
            Intent(context, SearchActivity::class.java)
                .putExtra(EXTRA_QUERY, query)
    }
}