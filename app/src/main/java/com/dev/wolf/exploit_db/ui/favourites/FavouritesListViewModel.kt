package com.dev.wolf.exploit_db.ui.favourites

import androidx.lifecycle.viewModelScope
import com.dev.wolf.exploit_db.R
import com.dev.wolf.exploit_db.base.domain.ExploitDataRepository
import com.dev.wolf.exploit_db.core.model.Exploit
import com.dev.wolf.exploit_db.core.prefs.AppSettings
import com.dev.wolf.exploit_db.ui.list.ExploitListViewModel
import com.dev.wolf.exploit_db.ui.list.model.*
import com.dev.wolf.exploit_db.utils.ext.asLiveDataDistinct
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.Job
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.combine

class FavouritesListViewModel(
    private val repository: ExploitDataRepository,
    settings: AppSettings
) : ExploitListViewModel(settings) {

    private val exploitList = MutableStateFlow<List<Exploit>?>(null)
    private var loadingJob: Job? = null
    private val listError = MutableStateFlow<Throwable?>(null)

    private fun loadList() {
        if (loadingJob?.isActive == true) {
            return
        }
        loadingJob = launchLoadingJob(Dispatchers.Default) {
            try {
                listError.value = null
                val list = repository.getAllExploit()
                exploitList.value = list
            } catch (e: Throwable) {
                listError.value = e
            }
        }
    }

    init {
        loadList()
    }

    override val content = combine(
        exploitList,
        listError,
    ) { list, error ->
        when {
            list.isNullOrEmpty() && error != null -> listOf(error.toErrorState(canRetry = true))
            list == null -> listOf(LoadingState)
            list.isEmpty() -> listOf(EmptyState(
                R.drawable.ic_heart_outline,
                R.string.text_empty_holder_primary,
                R.string.you_have_not_favourites_yet
            ))
            else -> {
                val result = ArrayList<ListModel>(list.size + 2)
                list.toUi(result)
                when {
                    error != null -> result += error.toErrorFooter()
                }
                result
            }
        }
    }.asLiveDataDistinct(
        viewModelScope.coroutineContext + Dispatchers.Default,
        listOf(LoadingState)
    )

    override fun onRefresh() = Unit

    override fun onRetry() = Unit

    fun removeFromFavourites(exploit: Exploit) {
        launchJob {
            repository.removeFromStore(exploit)
        }
    }
}