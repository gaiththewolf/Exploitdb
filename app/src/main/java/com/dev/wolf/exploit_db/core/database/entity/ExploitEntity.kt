package com.dev.wolf.exploit_db.core.database.entity

import androidx.room.ColumnInfo
import androidx.room.Entity
import androidx.room.PrimaryKey
import com.dev.wolf.exploit_db.core.model.*
import com.dev.wolf.exploit_db.utils.ext.format
import com.dev.wolf.exploit_db.utils.ext.toLocalDate
import java.util.*

@Entity(tableName = "exploit")
data class ExploitEntity(
    @PrimaryKey(autoGenerate = false)
    @ColumnInfo(name = "exploit_id") val id: Long,
    @ColumnInfo(name = "title") val title: String,
    @ColumnInfo(name = "url") val url: String,
    @ColumnInfo(name = "is_verified") val isVerified: Boolean,
    @ColumnInfo(name = "author") val author: String?,
    @ColumnInfo(name = "created_at") val createdAt: String,
    @ColumnInfo(name = "is_application") val isApplication: Boolean,
    @ColumnInfo(name = "is_application_url") val isApplicationUrl: String?,
    @ColumnInfo(name = "type_id") val typeId: String?,
    @ColumnInfo(name = "type") val type: String?,
    @ColumnInfo(name = "platform_id") val platformId: String?,
    @ColumnInfo(name = "platform") val platform: String?,
    @ColumnInfo(name = "port_id") val portId: String?,
    @ColumnInfo(name = "port") val port: String?,
    @ColumnInfo(name = "edb_id") val edb_id: String,
    @ColumnInfo(name = "code") val code: String?,
) {

    fun toExploit(tags: Set<Tag> = emptySet(),cve: Set<CVE> = emptySet()) = Exploit(
        id = this.id,
        title = this.title,
        url = this.url,
        isVerified = this.isVerified,
        author = this.author,
        createdAt = this.createdAt.toLocalDate() ?: Date(),
        isApplication = Pair(this.isApplication, this.isApplicationUrl),
        type = Type(title = this.type.orEmpty(), key = this.typeId.orEmpty()),
        platform = Platform(title = this.platform.orEmpty(), key = this.platformId.orEmpty()),
        port = Port(title = this.port.orEmpty(), key = this.portId.orEmpty()),
        edb_id = this.edb_id,
        code = this.code,
        tags = tags,
        cve = cve
    )

    companion object {

        fun from(exploit: Exploit) = ExploitEntity(
            id = exploit.id,
            title = exploit.title,
            url = exploit.url,
            isVerified = exploit.isVerified,
            author = exploit.author,
            createdAt = exploit.createdAt.toLocalDate().orEmpty(),
            isApplication = exploit.isApplication.first,
            isApplicationUrl = exploit.isApplication.second,
            typeId = exploit.type?.key,
            type = exploit.type?.title,
            platformId = exploit.platform?.key,
            platform = exploit.platform?.title,
            portId = exploit.type?.key,
            port = exploit.port?.title,
            edb_id = exploit.edb_id,
            code = exploit.code
        )
    }
}