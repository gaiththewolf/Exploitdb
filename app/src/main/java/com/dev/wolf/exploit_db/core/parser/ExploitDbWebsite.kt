package com.dev.wolf.exploit_db.core.parser

import android.util.Log
import com.dev.wolf.exploit_db.base.domain.LoaderContext
import com.dev.wolf.exploit_db.core.model.*
import com.dev.wolf.exploit_db.utils.ext.*
import okhttp3.Headers
import java.util.*
import kotlin.collections.ArrayList

class ExploitDbWebsite(loaderContext: LoaderContext) : RemoteRepository(loaderContext) {

    override val defaultDomain = "www.exploit-db.com"

    private val listBaseUrl = "draw=1&columns[0][data]=date_published&columns[1][data]=download&columns[2][data]=application_md5&columns[3][data]=verified&columns[4][data]=description&columns[5][data]=type_id&columns[6][data]=platform_id&columns[7][data]=author_id&columns[8][data]=code&columns[9][data]=id&order[0][column]=9&order[0][dir]=desc&length=15&author="

    override suspend fun getExploitList(
        offset: Int,
        query: String?,
        type: Type?,
        platform: Platform?,
        port: Port?,
        tag: Tag?,
        verified : Boolean,
        hasapp : Boolean,
        nomsf : Boolean
    ): List<Exploit> {
        val url = buildString {
            append("https://")
            append(defaultDomain)
            if (query != null){
                append("/search?q=${query.urlEncoded()}")
                append("&$listBaseUrl&start=$offset")
            }else if(verified || hasapp || nomsf){
                append("/search?verified=$verified&hasapp=$hasapp&nomsf=$nomsf")
                append("&$listBaseUrl&start=$offset")
            }else
                append("/?$listBaseUrl&start=$offset")

            if (type != null)
                if (type.key.isNotEmpty())
                    append("&type=${type.key}")

            if (platform != null)
                if (platform.key.isNotEmpty())
                    append("&platform=${platform.key}")

            if (port != null)
                if (port.key.isNotEmpty())
                    append("&port=${port.key}")

            if (tag != null)
                if (tag.key.isNotEmpty())
                    append("&tag=${tag.key}")
        }
        Log.d("Exploit_db_site", "url list : $url")
        val json = loaderContext.httpGet(url, PREDEFINED_HEADERS).parseJson().getJSONArray("data") ?: parseFailed("Invalid response")
        val total = json.length()
        val list = ArrayList<Exploit>(total)
        for (i in 0 until total) {
            val jo = json.getJSONObject(i)
            val id = jo.getString("id")
            val expUrl = "/exploits/$id".withDomain()
            val portExploit = jo.getInt("port")
            val applicationPath = jo.getString("application_path")
            list += Exploit(
                id = generateUid(expUrl),
                title = jo.getJSONArray("description").getString(1),
                url = expUrl,
                isVerified = jo.getInt("verified") == 1,
                tags = jo.getJSONArray("tags").mapToSet {
                    Tag(
                        key = it.getString("id"),
                        title = it.getString("title")
                    ) },
                author = jo.getJSONArray("author_id").getString(1),
                createdAt = jo.getString("date_published").toLocalDate() ?: continue,
                isApplication = Pair(applicationPath.isNotEmpty(), applicationPath),
                type = Type(jo.getString("type_id"), jo.getString("type_id").lowercase()),
                platform = Platform(jo.getString("platform_id"),jo.getString("platform_id").lowercase()),
                port = if(portExploit > 0) Port(portExploit.toString(),portExploit.toString()) else null,
                edb_id = id,
                cve = jo.getJSONArray("code").mapToSet {
                    CVE(
                        code_id = it.getString("id"),
                        code_type = it.getString("code_type"),
                        code = it.getString("code")
                    ) },
            )
        }
        return list
    }

    override suspend fun getDetails(exploit: Exploit): Exploit {
        val rowUrl = buildString {
            append("https://")
            append(defaultDomain)
            append("/raw/${exploit.edb_id}")
        }
        val code = loaderContext.httpGet(rowUrl).parseText()
        Log.d("Exploit_db_site", "code : $code")
        return exploit.copy(
            code = code
        )
    }

    override suspend fun getFilters(): ExpFilter {
        val doc = loaderContext.httpGet("https://$defaultDomain").parseHtml()
        val rootTags = doc.body().getElementById("tagSelect")
        val listTags = rootTags?.select("option")?.mapNotNull { option ->
            if (option.attr("value").isNullOrEmpty())
                Tag(key = "", title = "All")
            else
                Tag(
                    key = option.attr("value"),
                    title = option.ownText()
                )
        }.orEmpty()
        val rootTypes = doc.body().getElementById("typeSelect")
        val listTypes = rootTypes?.select("option")?.mapNotNull { option ->
            if (option.attr("value").isNullOrEmpty())
                Type(key = "", title = "All")
            else
                Type(
                    key = option.attr("value"),
                    title = option.ownText()
                )
        }.orEmpty()
        val rootPlatforms = doc.body().getElementById("platformSelect")
        val listPlatforms = rootPlatforms?.select("option")?.mapNotNull { option ->
            if (option.attr("value").isNullOrEmpty())
                Platform(key = "", title = "All")
            else
                Platform(
                    key = option.attr("value"),
                    title = option.ownText()
                )
        }.orEmpty()
        val rootPorts = doc.body().getElementById("portSelect")
        val listPorts = rootPorts?.select("option")?.mapNotNull { option ->
            if (option.attr("value").isNullOrEmpty())
                Port(key = "", title = "All")
            else
                Port(
                    key = option.attr("value"),
                    title = option.ownText()
                )
        }.orEmpty()
        return ExpFilter(
            listTypes,
            listPlatforms,
            listPorts,
            listTags,
            verified = false,
            hasApp = false,
            noMSF = false
        )
    }

    private companion object {
        val PREDEFINED_HEADERS = Headers.Builder()
            .add("x-requested-with", "XMLHttpRequest")
            .build()
    }
}
