package com.dev.wolf.exploit_db.settings.about

import android.content.ActivityNotFoundException
import android.content.Intent
import android.net.Uri
import android.os.Bundle
import android.view.View
import androidx.preference.Preference
import com.dev.wolf.exploit_db.BuildConfig
import com.dev.wolf.exploit_db.R
import com.dev.wolf.exploit_db.base.BasePreferenceFragment
import com.dev.wolf.exploit_db.core.prefs.AppSettings
import com.dev.wolf.exploit_db.settings.AppUpdateChecker
import com.dev.wolf.exploit_db.utils.ext.viewLifecycleScope
import kotlinx.coroutines.launch

class AboutSettingsFragment : BasePreferenceFragment(R.string.about) {

    override fun onCreatePreferences(savedInstanceState: Bundle?, rootKey: String?) {
        addPreferencesFromResource(R.xml.pref_about)
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)
        findPreference<Preference>(AppSettings.KEY_APP_UPDATE_AUTO)?.run {
            isVisible = AppUpdateChecker.isUpdateSupported(context)
        }
        findPreference<Preference>(AppSettings.KEY_APP_VERSION)?.run {
            title = getString(R.string.app_version, BuildConfig.VERSION_NAME)
            isEnabled = AppUpdateChecker.isUpdateSupported(context)
        }
    }


    override fun onPreferenceTreeClick(preference: Preference?): Boolean {
        return when (preference?.key) {
            AppSettings.KEY_APP_VERSION -> {
                checkForUpdates()
                true
            }
            AppSettings.KEY_FEEDBACK_GITHUB -> {
                val intent = Intent(Intent.ACTION_VIEW)
                intent.data = Uri.parse("https://github.com/gaiththewolf/Exploitdb/issues")
                try {
                    startActivity(Intent.createChooser(intent, "GitHub"))
                } catch (ex: ActivityNotFoundException) {
                    ex.printStackTrace()
                }
                true
            }
            else -> super.onPreferenceTreeClick(preference)
        }
    }

    private fun checkForUpdates() {
        viewLifecycleScope.launch {
            findPreference<Preference>(AppSettings.KEY_APP_VERSION)?.run {
                setSummary(R.string.checking_for_updates)
                isSelectable = false
            }
            val result = AppUpdateChecker(activity ?: return@launch).checkNow()
            findPreference<Preference>(AppSettings.KEY_APP_VERSION)?.run {
                setSummary(
                    when (result) {
                        true -> R.string.check_for_updates
                        false -> R.string.no_update_available
                        null -> R.string.update_check_failed
                    }
                )
                isSelectable = true
            }
        }
    }
}