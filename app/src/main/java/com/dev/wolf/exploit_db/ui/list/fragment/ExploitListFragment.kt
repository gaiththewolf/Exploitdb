package com.dev.wolf.exploit_db.ui.list.fragment

import android.os.Bundle
import android.util.Log
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import androidx.annotation.CallSuper
import androidx.core.content.ContextCompat
import androidx.core.graphics.Insets
import androidx.core.view.updatePadding
import androidx.swiperefreshlayout.widget.SwipeRefreshLayout
import com.dev.wolf.exploit_db.R
import com.dev.wolf.exploit_db.base.BaseFragment
import com.dev.wolf.exploit_db.base.list.PaginationScrollListener
import com.dev.wolf.exploit_db.databinding.FragmentListBinding
import com.dev.wolf.exploit_db.ui.list.ExploitListViewModel
import com.dev.wolf.exploit_db.ui.list.model.ListModel
import com.dev.wolf.exploit_db.utils.RecycledViewPoolHolder
import com.dev.wolf.exploit_db.utils.ext.getDisplayMessage
import com.google.android.material.snackbar.Snackbar


abstract class ExploitListFragment : BaseFragment<FragmentListBinding>(), SwipeRefreshLayout.OnRefreshListener, PaginationScrollListener.Callback {

    protected abstract val viewModel: ExploitListViewModel
    open val isSwipeRefreshEnabled = true


    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setHasOptionsMenu(true)
    }

    override fun onInflateView(
        inflater: LayoutInflater,
        container: ViewGroup?
    ) = FragmentListBinding.inflate(inflater, container, false)

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)
        with(binding.swipeRefreshLayout) {
            setColorSchemeColors(
                ContextCompat.getColor(context, R.color.color_primary),
                ContextCompat.getColor(context, R.color.color_primary_variant)
            )
            setOnRefreshListener(this@ExploitListFragment)
            isEnabled = isSwipeRefreshEnabled
        }

        (parentFragment as? RecycledViewPoolHolder)?.let {
            binding.recyclerView.setRecycledViewPool(it.recycledViewPool)
        }

        viewModel.content.observe(viewLifecycleOwner, ::onListChanged)
        viewModel.onError.observe(viewLifecycleOwner, ::onError)
        viewModel.isLoading.observe(viewLifecycleOwner, ::onLoadingStateChanged)
    }

    override fun onWindowInsetsChanged(insets: Insets) {
        binding.recyclerView.updatePadding(
            bottom = insets.bottom
        )
        binding.recyclerViewFilter.updatePadding(
            bottom = insets.bottom
        )
        binding.root.updatePadding(
            left = insets.left,
            right = insets.right
        )
    }

    @CallSuper
    override fun onRefresh() {
        binding.swipeRefreshLayout.isRefreshing = true
        viewModel.onRefresh()
    }

    private fun onListChanged(list: List<ListModel>) {
        list.map {
            Log.d("listModel", it.toString())
        }
        //listAdapter?.setItems(list, listCommitCallback)
    }

    private fun onError(e: Throwable) {
        Snackbar.make(
            binding.recyclerView,
            e.getDisplayMessage(resources),
            Snackbar.LENGTH_SHORT
        ).show()
    }

    @CallSuper
    protected open fun onLoadingStateChanged(isLoading: Boolean) {
        binding.swipeRefreshLayout.isEnabled = binding.swipeRefreshLayout.isRefreshing ||
                isSwipeRefreshEnabled && !isLoading
        if (!isLoading) {
            binding.swipeRefreshLayout.isRefreshing = false
        }
    }

}