package com.dev.wolf.exploit_db.ui.list.adapter

import androidx.recyclerview.widget.DiffUtil
import com.dev.wolf.exploit_db.base.list.OnListItemClickListener
import com.dev.wolf.exploit_db.core.model.Exploit
import com.dev.wolf.exploit_db.ui.list.model.ExploitListModel
import com.dev.wolf.exploit_db.ui.list.model.ListModel
import com.hannesdorfmann.adapterdelegates4.AsyncListDifferDelegationAdapter
import kotlin.jvm.internal.Intrinsics

class ExploitListAdapter(
    clickListener: OnListItemClickListener<Exploit>,
    onRetryClick: (Throwable) -> Unit
) : AsyncListDifferDelegationAdapter<ListModel>(DiffCallback()) {

    init {
        delegatesManager
            .addDelegate(
                ITEM_TYPE_EXPLOIT_LIST,
                exploitListItemAD(clickListener)
            )
            .addDelegate(ITEM_TYPE_LOADING_FOOTER, loadingFooterAD())
            .addDelegate(ITEM_TYPE_LOADING_STATE, loadingStateAD())
            .addDelegate(ITEM_TYPE_ERROR_STATE, errorStateListAD(onRetryClick))
            .addDelegate(ITEM_TYPE_ERROR_FOOTER, errorFooterAD(onRetryClick))
            .addDelegate(ITEM_TYPE_EMPTY, emptyStateListAD())
            .addDelegate(ITEM_TYPE_HEADER, listHeaderAD())
    }

    fun setItems(list: List<ListModel>, commitCallback: Runnable) {
        differ.submitList(list, commitCallback)
    }

    fun setItems2(list: List<ListModel>) {
        differ.submitList(list)
    }

    private class DiffCallback : DiffUtil.ItemCallback<ListModel>() {

        override fun areItemsTheSame(oldItem: ListModel, newItem: ListModel) = when {
            oldItem is ExploitListModel && newItem is ExploitListModel -> {
                oldItem.id == newItem.id
            }
            else -> oldItem.javaClass == newItem.javaClass
        }

        override fun areContentsTheSame(oldItem: ListModel, newItem: ListModel): Boolean {
            return Intrinsics.areEqual(oldItem, newItem)
        }
    }

    companion object {

        const val ITEM_TYPE_EXPLOIT_LIST = 0
        const val ITEM_TYPE_LOADING_FOOTER = 1
        const val ITEM_TYPE_LOADING_STATE = 2
        const val ITEM_TYPE_ERROR_STATE = 3
        const val ITEM_TYPE_ERROR_FOOTER = 4
        const val ITEM_TYPE_EMPTY = 5
        const val ITEM_TYPE_HEADER = 6
    }
}