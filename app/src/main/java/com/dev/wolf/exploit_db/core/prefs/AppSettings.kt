package com.dev.wolf.exploit_db.core.prefs

import android.content.Context
import android.content.SharedPreferences
import androidx.appcompat.app.AppCompatDelegate
import androidx.preference.PreferenceManager
import kotlinx.coroutines.channels.awaitClose
import kotlinx.coroutines.channels.sendBlocking
import kotlinx.coroutines.flow.callbackFlow
import android.provider.Settings
import com.dev.wolf.exploit_db.utils.delegates.prefs.*

class AppSettings private constructor(private val prefs: SharedPreferences) :
    SharedPreferences by prefs {

    constructor(context: Context) : this(
        PreferenceManager.getDefaultSharedPreferences(context)
    )

    val theme by StringIntPreferenceDelegate(
        KEY_THEME,
        AppCompatDelegate.MODE_NIGHT_FOLLOW_SYSTEM
    )

    val isAmoledTheme by BoolPreferenceDelegate(KEY_THEME_AMOLED, defaultValue = false)

    val isToolbarHideWhenScrolling by BoolPreferenceDelegate(KEY_HIDE_TOOLBAR, defaultValue = true)

    var isTrafficWarningEnabled by BoolPreferenceDelegate(KEY_TRAFFIC_WARNING, defaultValue = true)

    val appUpdateAuto by BoolPreferenceDelegate(KEY_APP_UPDATE_AUTO, defaultValue = true)

    var appUpdate by LongPreferenceDelegate(KEY_APP_UPDATE, defaultValue = 0L)

    val trackerNotifications by BoolPreferenceDelegate(
        KEY_TRACKER_NOTIFICATIONS,
        defaultValue = true
    )

    var notificationSound by StringPreferenceDelegate(
        KEY_NOTIFICATIONS_SOUND,
        Settings.System.DEFAULT_NOTIFICATION_URI.toString()
    )

    val notificationVibrate by BoolPreferenceDelegate(KEY_NOTIFICATIONS_VIBRATE, false)

    val notificationLight by BoolPreferenceDelegate(KEY_NOTIFICATIONS_LIGHT, true)

    val codeViewZoom by BoolPreferenceDelegate(KEY_CODEVIEW_ZOOM, true)

    val codeViewWrapLine by BoolPreferenceDelegate(KEY_CODEVIEW_WRAP_LINE, true)

    val codeViewLineNumber by BoolPreferenceDelegate(KEY_CODEVIEW_LINE_NUMBER, true)

    var codeViewLightTheme by StringPreferenceDelegate(
        KEY_CODEVIEW_LIGHT_THEME,
        defValue = "github"
    )

    var codeViewDarkTheme by StringPreferenceDelegate(
        KEY_CODEVIEW_DARK_THEME,
        defValue = "atom-one-dark"
    )


    @Deprecated("Use observe()")
    fun subscribe(listener: SharedPreferences.OnSharedPreferenceChangeListener) {
        prefs.registerOnSharedPreferenceChangeListener(listener)
    }

    fun unsubscribe(listener: SharedPreferences.OnSharedPreferenceChangeListener) {
        prefs.unregisterOnSharedPreferenceChangeListener(listener)
    }

    fun observe() = callbackFlow<String> {
        val listener = SharedPreferences.OnSharedPreferenceChangeListener { _, key ->
            sendBlocking(key)
        }
        prefs.registerOnSharedPreferenceChangeListener(listener)
        awaitClose {
            prefs.unregisterOnSharedPreferenceChangeListener(listener)
        }
    }

    val dnsClient by EnumPreferenceDelegate(DNS_CLIENT_TYPE::class.java,
        PREFERRED_DNS_CLIENT,
        DNS_CLIENT_TYPE.NONE
    )

    companion object {

        const val KEY_THEME = "theme"
        const val KEY_THEME_AMOLED = "amoled_theme"
        const val KEY_HIDE_TOOLBAR = "hide_toolbar"
        const val KEY_TRAFFIC_WARNING = "traffic_warning"
        const val KEY_COOKIES_CLEAR = "cookies_clear"
        const val KEY_APP_UPDATE = "app_update"
        const val KEY_APP_UPDATE_AUTO = "app_update_auto"
        const val KEY_TRACKER_NOTIFICATIONS = "tracker_notifications"
        const val KEY_NOTIFICATIONS_SETTINGS = "notifications_settings"
        const val KEY_NOTIFICATIONS_SOUND = "notifications_sound"
        const val KEY_NOTIFICATIONS_VIBRATE = "notifications_vibrate"
        const val KEY_NOTIFICATIONS_LIGHT = "notifications_light"
        const val KEY_APP_VERSION = "app_version"
        const val PREFERRED_DNS_CLIENT = "preferred_dns_client"
        const val KEY_FEEDBACK_GITHUB = "about_feedback_github"
        const val KEY_CODEVIEW_LIGHT_THEME = "code_view_light_theme"
        const val KEY_CODEVIEW_DARK_THEME = "code_view_dark_theme"
        const val KEY_CODEVIEW_ZOOM = "code_view_zoom"
        const val KEY_CODEVIEW_WRAP_LINE = "code_view_wrap"
        const val KEY_CODEVIEW_LINE_NUMBER = "code_view_line_number"
    }
}