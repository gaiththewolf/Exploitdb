package com.dev.wolf.exploit_db.tracker

import androidx.room.withTransaction
import com.dev.wolf.exploit_db.core.database.ExploitDatabase
import com.dev.wolf.exploit_db.core.database.entity.TrackEntity
import com.dev.wolf.exploit_db.core.model.Exploit
import com.dev.wolf.exploit_db.utils.ext.toLocalDate
import java.util.*

class TrackingRepository(private val db: ExploitDatabase) {

    suspend fun getNewExploitCount(): Int {
        return db.tracksDao.findAll().count()
    }
    suspend fun cleanup() {
        db.withTransaction { db.tracksDao.cleanup(Date().toLocalDate().orEmpty()) }
    }

    suspend fun storeTrackResult(trackedExploit: Exploit) {
        db.withTransaction {
            val entity = TrackEntity(
                id = trackedExploit.id,
                title = trackedExploit.title,
                url = trackedExploit.url,
                isVerified = trackedExploit.isVerified,
                author = trackedExploit.author,
                createdAt = trackedExploit.createdAt.toLocalDate().orEmpty(),
                isApplication = trackedExploit.isApplication.first,
                isApplicationUrl = trackedExploit.isApplication.second,
                typeId = trackedExploit.type?.key,
                type = trackedExploit.type?.title,
                platformId = trackedExploit.platform?.key,
                platform = trackedExploit.platform?.title,
                portId = trackedExploit.port?.key,
                port = trackedExploit.port?.title,
                edb_id = trackedExploit.edb_id,
                code = trackedExploit.code
            )
            db.tracksDao.upsert(entity)
        }
    }
}