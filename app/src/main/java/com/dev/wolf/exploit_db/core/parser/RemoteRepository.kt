package com.dev.wolf.exploit_db.core.parser

import com.dev.wolf.exploit_db.base.domain.LoaderContext
import com.dev.wolf.exploit_db.core.exceptions.ParseException
import com.dev.wolf.exploit_db.core.model.*

abstract class RemoteRepository(
    protected val loaderContext: LoaderContext
) : ExploitRepository {

    protected abstract val defaultDomain: String

    override suspend fun getFilters(): ExpFilter = ExpFilter(null, null, null, null)

    protected fun String.withDomain(subdomain: String? = null, isUseSsl : Boolean = true) = when {
        this.startsWith("//") -> buildString {
            append("http")
            if (isUseSsl) {
                append('s')
            }
            append(":")
            append(this@withDomain)
        }
        this.startsWith("/") -> buildString {
            append("http")
            if (isUseSsl) {
                append('s')
            }
            append("://")
            if (subdomain != null) {
                append(subdomain)
                append('.')
            }
            append(defaultDomain)
            append(this@withDomain)
        }
        else -> this
    }

    protected fun generateUid(url: String): Long {
        var h = 1125899906842597L
        "exploit-db".forEach { c ->
            h = 31 * h + c.code.toLong()
        }
        url.forEach { c ->
            h = 31 * h + c.code.toLong()
        }
        return h
    }

    protected fun generateUid(id: Long): Long {
        var h = 1125899906842597L
        "exploit-db".forEach { c ->
            h = 31 * h + c.code.toLong()
        }
        h = 31 * h + id
        return h
    }

    protected fun parseFailed(message: String? = null): Nothing {
        throw ParseException(message)
    }
}