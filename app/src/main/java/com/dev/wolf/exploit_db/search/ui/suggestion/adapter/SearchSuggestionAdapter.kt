package com.dev.wolf.exploit_db.search.ui.suggestion.adapter

import androidx.recyclerview.widget.DiffUtil
import com.dev.wolf.exploit_db.search.ui.suggestion.SearchSuggestionItem
import com.dev.wolf.exploit_db.search.ui.suggestion.SearchSuggestionListener
import com.hannesdorfmann.adapterdelegates4.AsyncListDifferDelegationAdapter
import kotlin.jvm.internal.Intrinsics

class SearchSuggestionAdapter(
    listener: SearchSuggestionListener,
) : AsyncListDifferDelegationAdapter<SearchSuggestionItem>(DiffCallback()) {

    init {
        delegatesManager.addDelegate(ITEM_TYPE_EXPLOIT, searchSuggestionExploitAD(listener))
            .addDelegate(ITEM_TYPE_QUERY, searchSuggestionQueryAD(listener))
    }

    private class DiffCallback : DiffUtil.ItemCallback<SearchSuggestionItem>() {

        override fun areItemsTheSame(
            oldItem: SearchSuggestionItem,
            newItem: SearchSuggestionItem,
        ): Boolean = when {
            oldItem is SearchSuggestionItem.ExploitItem && newItem is SearchSuggestionItem.ExploitItem -> {
                oldItem.exploit.id == newItem.exploit.id
            }
            oldItem is SearchSuggestionItem.RecentQuery && newItem is SearchSuggestionItem.RecentQuery -> {
                oldItem.query == newItem.query
            }
            else -> false
        }

        override fun areContentsTheSame(
            oldItem: SearchSuggestionItem,
            newItem: SearchSuggestionItem,
        ): Boolean = Intrinsics.areEqual(oldItem, newItem)
    }

    companion object {

        const val ITEM_TYPE_EXPLOIT = 0
        const val ITEM_TYPE_QUERY = 1
    }
}