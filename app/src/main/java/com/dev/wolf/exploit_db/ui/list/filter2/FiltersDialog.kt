package com.dev.wolf.exploit_db.ui.list.filter2

import android.os.Bundle
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.AdapterView
import androidx.appcompat.app.AlertDialog
import androidx.core.view.isVisible
import androidx.fragment.app.FragmentManager
import com.dev.wolf.exploit_db.R
import com.dev.wolf.exploit_db.base.AlertDialogFragment
import com.dev.wolf.exploit_db.core.model.*
import com.dev.wolf.exploit_db.core.prefs.AppSettings
import com.dev.wolf.exploit_db.databinding.DialogExploitFilterBinding
import com.dev.wolf.exploit_db.ui.list.RemoteListViewModel
import com.dev.wolf.exploit_db.ui.list.filter.OnFilterChangedListener
import org.koin.android.ext.android.inject
import org.koin.androidx.viewmodel.ext.android.sharedViewModel

class FiltersDialog(state: ExploitFilter?, private val listener: OnFilterChangedListener) :
    AlertDialogFragment<DialogExploitFilterBinding>() {

    private val viewModel by sharedViewModel<RemoteListViewModel>()
    private var currentState = state ?: ExploitFilter(null, null, null, null)

    override fun onBuildDialog(builder: AlertDialog.Builder) {
        builder.setTitle(getString(R.string.filter))
            .setCancelable(false)
    }

    override fun onInflateView(
        inflater: LayoutInflater,
        container: ViewGroup?
    ): DialogExploitFilterBinding = DialogExploitFilterBinding.inflate(inflater, container, false)

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)

        binding.buttonApply.setOnClickListener {
            listener.onFilterChanged(currentState)
            dismiss()
        }

        binding.buttonCancel.setOnClickListener {dismiss()}

        val typesAdapter = TypesAdapter()
        binding.spinnerTypes.adapter = typesAdapter
        val platformsAdapter = PlatformsAdapter()
        binding.spinnerPlatforms.adapter = platformsAdapter
        val portsAdapter = PortsAdapter()
        binding.spinnerPorts.adapter = portsAdapter
        val tagsAdapter = TagsAdapter()
        binding.spinnerTags.adapter = tagsAdapter

        viewModel.filter.observe(viewLifecycleOwner, {
            typesAdapter.setItems(it.types)
            binding.typesContainer.isVisible = it.types.size > 1
            binding.spinnerTypes.setSelection(typesAdapter.getPosition(currentState.type))
            binding.spinnerTypes.onItemSelectedListener = (object : AdapterView.OnItemSelectedListener{
                override fun onItemSelected(parent: AdapterView<*>?, view: View?, position: Int, id: Long) {
                    val selected = typesAdapter.getItem(position) as Type
                    if (selected != currentState.type){
                        currentState = currentState.copy(type = selected)
                    }
                }
                override fun onNothingSelected(p0: AdapterView<*>?) = Unit
            })

            platformsAdapter.setItems(it.platforms)
            binding.platformsContainer.isVisible = it.platforms.size > 1
            binding.spinnerPlatforms.setSelection(platformsAdapter.getPosition(currentState.platform))
            binding.spinnerPlatforms.onItemSelectedListener = (object : AdapterView.OnItemSelectedListener{
                override fun onItemSelected(parent: AdapterView<*>?, view: View?, position: Int, id: Long) {
                    val selected = platformsAdapter.getItem(position) as Platform
                    if (selected != currentState.platform){
                        currentState = currentState.copy(platform = selected)
                    }
                }
                override fun onNothingSelected(p0: AdapterView<*>?) = Unit
            })

            portsAdapter.setItems(it.ports)
            binding.portsContainer.isVisible = it.ports.size > 1
            binding.spinnerPorts.setSelection(portsAdapter.getPosition(currentState.port))
            binding.spinnerPorts.onItemSelectedListener = (object : AdapterView.OnItemSelectedListener{
                override fun onItemSelected(parent: AdapterView<*>?, view: View?, position: Int, id: Long) {
                    val selected = portsAdapter.getItem(position) as Port
                    if (selected != currentState.port){
                        currentState = currentState.copy(port = selected)
                    }
                }
                override fun onNothingSelected(p0: AdapterView<*>?) = Unit
            })

            tagsAdapter.setItems(it.tags)
            binding.tagsContainer.isVisible = it.tags.size > 1
            binding.spinnerTags.setSelection(tagsAdapter.getPosition(currentState.tag))
            binding.spinnerTags.onItemSelectedListener = (object : AdapterView.OnItemSelectedListener{
                override fun onItemSelected(parent: AdapterView<*>?, view: View?, position: Int, id: Long) {
                    val selected = tagsAdapter.getItem(position) as Tag
                    if (selected != currentState.tag){
                        currentState = currentState.copy(tag = selected)
                    }
                }
                override fun onNothingSelected(p0: AdapterView<*>?) = Unit
            })
        })

    }

    companion object {
        private const val TAG = "FiltersDialog"
        fun show(state: ExploitFilter?, fm: FragmentManager, listener: OnFilterChangedListener) =
            FiltersDialog(state, listener).show(fm, TAG)
    }
}