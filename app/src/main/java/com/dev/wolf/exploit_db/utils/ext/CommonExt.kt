package com.dev.wolf.exploit_db.utils.ext

import android.util.Log
import kotlinx.coroutines.delay

suspend inline fun <T, R> T.retryUntilSuccess(maxAttempts: Int, action: T.() -> R): R {
    var attempts = maxAttempts
    while (true) {
        try {
            return this.action()
        } catch (e: Exception) {
            attempts--
            if (attempts <= 0) {
                throw e
            } else {
                delay(1000)
            }
        }
    }
}


inline fun <T> measured(tag: String, block: () -> T): T {
    val time = System.currentTimeMillis()
    val res = block()
    val spent = System.currentTimeMillis() - time
    Log.d("measured", "$tag ${spent.format(1)} ms")
    return res
}