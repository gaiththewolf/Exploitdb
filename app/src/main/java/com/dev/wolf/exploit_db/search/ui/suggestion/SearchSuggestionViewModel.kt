package com.dev.wolf.exploit_db.search.ui.suggestion

import androidx.lifecycle.MutableLiveData
import androidx.lifecycle.viewModelScope
import com.dev.wolf.exploit_db.base.BaseViewModel
import com.dev.wolf.exploit_db.search.ExploitSearchRepository
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.Job
import kotlinx.coroutines.flow.*
import kotlinx.coroutines.plus

class SearchSuggestionViewModel(
    private val repository: ExploitSearchRepository,
) : BaseViewModel() {

    private val query = MutableStateFlow("")
    private val isLocalSearch = MutableStateFlow(false)
    private var suggestionJob: Job? = null

    val suggestion = MutableLiveData<List<SearchSuggestionItem>>()

    init {
        setupSuggestion()
    }

    fun onQueryChanged(newQuery: String) {
        query.value = newQuery
    }

    fun saveQuery(query: String) {
        repository.saveSearchQuery(query)
    }

    fun clearSearchHistory() {
        launchJob {
            repository.clearSearchHistory()
            setupSuggestion()
        }
    }

    fun deleteQuery(query: String) {
        launchJob {
            repository.deleteSearchQuery(query)
            setupSuggestion()
        }
    }

    private fun setupSuggestion() {
        suggestionJob?.cancel()
        suggestionJob = combine(
            query
                .debounce(DEBOUNCE_TIMEOUT)
                .mapLatest { q ->
                    q to repository.getQuerySuggestion(q, MAX_QUERY_ITEMS)
                },
            isLocalSearch
        ) { (q, queries), _ ->
            val result = ArrayList<SearchSuggestionItem>(MAX_SUGGESTION_ITEMS)
            if (q.length >= SEARCH_THRESHOLD) {
                repository.getSuggestion(q, MAX_EXPLOIT_ITEMS)
                    .mapTo(result) {
                        SearchSuggestionItem.ExploitItem(it)
                    }
            }
            queries.mapTo(result) { SearchSuggestionItem.RecentQuery(it) }
            result
        }.onEach {
            suggestion.postValue(it)
        }.launchIn(viewModelScope + Dispatchers.Default)
    }

    private companion object {

        const val DEBOUNCE_TIMEOUT = 500L
        const val SEARCH_THRESHOLD = 3
        const val MAX_EXPLOIT_ITEMS = 3
        const val MAX_QUERY_ITEMS = 120
        const val MAX_SUGGESTION_ITEMS = MAX_EXPLOIT_ITEMS + MAX_QUERY_ITEMS + 1
    }
}