package com.dev.wolf.exploit_db.core.parser

import com.dev.wolf.exploit_db.base.domain.LoaderContext
import com.dev.wolf.exploit_db.core.model.*
import com.dev.wolf.exploit_db.utils.ext.*

class exploitdb_site(loaderContext: LoaderContext) :
    RemoteRepository(loaderContext) {

    override val defaultDomain = "www.exploit-db.com"

    private val listBaseUrl = "draw=1&columns[0][data]=date_published&columns[0][name]=date_published&columns[0][searchable]=true&columns[0][orderable]=true&columns[0][search][value]=&columns[0][search][regex]=false&columns[1][data]=download&columns[1][name]=download&columns[1][searchable]=false&columns[1][orderable]=false&columns[1][search][value]=&columns[1][search][regex]=false&columns[2][data]=application_md5&columns[2][name]=application_md5&columns[2][searchable]=true&columns[2][orderable]=false&columns[2][search][value]=&columns[2][search][regex]=false&columns[3][data]=verified&columns[3][name]=verified&columns[3][searchable]=true&columns[3][orderable]=false&columns[3][search][value]=&columns[3][search][regex]=false&columns[4][data]=description&columns[4][name]=description&columns[4][searchable]=true&columns[4][orderable]=false&columns[4][search][value]=&columns[4][search][regex]=false&columns[5][data]=type_id&columns[5][name]=type_id&columns[5][searchable]=true&columns[5][orderable]=false&columns[5][search][value]=&columns[5][search][regex]=false&columns[6][data]=platform_id&columns[6][name]=platform_id&columns[6][searchable]=true&columns[6][orderable]=false&columns[6][search][value]=&columns[6][search][regex]=false&columns[7][data]=author_id&columns[7][name]=author_id&columns[7][searchable]=false&columns[7][orderable]=false&columns[7][search][value]=&columns[7][search][regex]=false&columns[8][data]=code&columns[8][name]=code.code&columns[8][searchable]=true&columns[8][orderable]=true&columns[8][search][value]=&columns[8][search][regex]=false&columns[9][data]=id&columns[9][name]=id&columns[9][searchable]=false&columns[9][orderable]=true&columns[9][search][value]=&columns[9][search][regex]=false&order[0][column]=9&order[0][dir]=desc&start=0&length=15&search[value]=&search[regex]=false&author="

    override suspend fun getExploitList(
        offset: Int,
        query: String?,
        type: Type?,
        platform: Platform?,
        port: Port?,
        tag: Tag?
    ): List<Exploit> {
        val url = buildString {
            append("https://")
            append(defaultDomain)
            if (query != null){
                append("/search?q=${query.urlEncoded()}")
                append("&$listBaseUrl")
            }else
                append("?$listBaseUrl")
            if (type != null)
                append("&type=${type.key}")
            if (platform != null)
                append("&platform=${platform.key}")
            if (port != null)
                append("&port=${port.key}")
            if (tag != null)
                append("&tag=${tag.key}")
        }
        val json = loaderContext.httpGet(url).parseJson().getJSONArray("data") ?: parseFailed("Invalid response")
        val total = json.length()
        val list = ArrayList<Exploit>(total)
        for (i in 0 until total) {
            val jo = json.getJSONObject(i)
            val id = jo.getString("id")
            val expUrl = "https://www.exploit-db.com/exploits/$id"
            val isApp = jo.getString("application_path").isNullOrEmpty()
            list += Exploit(
                id = generateUid(expUrl),
                title = jo.getJSONArray("description").getString(1),
                url = expUrl,
                isVerified = jo.getBoolean("verified"),
                tags = jo.getJSONArray("tags").mapToSet { Tag( key = it.getString("id"), title = it.getString("title")) },
                author = jo.getJSONArray("author_id").getString(1),
                createdAt = jo.getString("date_published").toLocalDate(),
                isApplication = Pair(isApp,jo.getString("application_path")),
                type = Type(jo.getString("type_id"), jo.getString("type_id").lowercase()),
                platform = Platform(jo.getString("platform_id"),jo.getString("platform_id").lowercase()),
                edb_id = id,
                cve = jo.getJSONArray("code").mapToSet { CVE( code_id = it.getString("id"), code_type = it.getString("code_type"), code = it.getString("code")) },
            )
        }
        return list
    }

    override suspend fun getDetails(exploit: Exploit): Exploit = exploit

    override suspend fun getTags(): Set<Tag> = emptySet()
    override suspend fun getTypes(): Set<Type> = emptySet()
    override suspend fun getPlatforms(): Set<Platform> = emptySet()
    override suspend fun getPorts(): Set<Port> = emptySet()

}