package com.dev.wolf.exploit_db.ui.detail.ui

import androidx.lifecycle.asLiveData
import androidx.lifecycle.viewModelScope
import com.dev.wolf.exploit_db.base.BaseViewModel
import com.dev.wolf.exploit_db.base.domain.ExploitDataRepository
import com.dev.wolf.exploit_db.base.domain.ExploitIntent
import com.dev.wolf.exploit_db.core.exceptions.ExploitNotFoundException
import com.dev.wolf.exploit_db.core.model.Exploit
import com.dev.wolf.exploit_db.core.parser.ExploitRepository
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.flow.*
import kotlinx.coroutines.plus

class DetailsViewModel(
    intent: ExploitIntent,
    private val repository: ExploitRepository,
    private val exploitDataRepository: ExploitDataRepository,
) : BaseViewModel() {

    private val exploitData = MutableStateFlow<Exploit?>(intent.exploit)

    private val remoteExploit = MutableStateFlow<Exploit?>(null)

    val exploit = exploitData.filterNotNull()
        .asLiveData(viewModelScope.coroutineContext)

    private val favourite = exploitData.mapNotNull { it?.id }
        .distinctUntilChanged()
        .flatMapLatest { exploitId ->
            exploitDataRepository.observeIds(exploitId).map { it.isNotEmpty() }
        }.stateIn(viewModelScope + Dispatchers.Default, SharingStarted.Eagerly, false)

    val favouriteCategories = favourite
        .asLiveData(viewModelScope.coroutineContext)

    init {
        launchLoadingJob(Dispatchers.Default) {
            var exploit = exploitDataRepository.resolveIntent(intent)
                ?: throw ExploitNotFoundException("Cannot find exploit")
            exploitData.value = exploit
            exploit = repository.getDetails(exploit)
            exploitData.value = exploit
        }
    }

    fun getRemoteExploit(): Exploit? {
        return remoteExploit.value
    }

    fun addToFavourites(exploit: Exploit) {
        launchJob {
            exploitDataRepository.storeExploit(exploit)
        }
    }

    fun removeFromFavourites(exploit: Exploit) {
        launchJob {
            exploitDataRepository.removeFromStore(exploit)
        }
    }
}