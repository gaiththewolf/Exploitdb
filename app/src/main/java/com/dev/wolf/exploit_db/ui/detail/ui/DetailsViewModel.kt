package com.dev.wolf.exploit_db.ui.detail.ui

import androidx.lifecycle.asLiveData
import androidx.lifecycle.viewModelScope
import com.dev.wolf.exploit_db.base.BaseViewModel
import com.dev.wolf.exploit_db.base.domain.ExploitDataRepository
import com.dev.wolf.exploit_db.base.domain.ExploitIntent
import com.dev.wolf.exploit_db.core.exceptions.ExploitNotFoundException
import com.dev.wolf.exploit_db.core.model.Exploit
import com.dev.wolf.exploit_db.core.parser.ExploitRepository
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.filterNotNull

class DetailsViewModel(
    intent: ExploitIntent,
    private val repository: ExploitRepository,
    private val exploitDataRepository: ExploitDataRepository
) : BaseViewModel() {

    private val exploitData = MutableStateFlow<Exploit?>(intent.exploit)

    private val remoteExploit = MutableStateFlow<Exploit?>(null)

    val exploit = exploitData.filterNotNull()
        .asLiveData(viewModelScope.coroutineContext)

    init {
        launchLoadingJob(Dispatchers.Default) {
            var manga = exploitDataRepository.resolveIntent(intent)
                ?: throw ExploitNotFoundException("Cannot find exploit")
            exploitData.value = manga
            manga = repository.getDetails(manga)
            exploitData.value = manga
        }
    }

    fun getRemoteExploit(): Exploit? {
        return remoteExploit.value
    }
}