package com.dev.wolf.exploit_db.core.network

import com.dev.wolf.exploit_db.BuildConfig
import com.dev.wolf.exploit_db.core.prefs.AppSettings
import com.dev.wolf.exploit_db.core.prefs.DnsClientType
import com.dev.wolf.exploit_db.utils.CacheUtils
import okhttp3.CookieJar
import okhttp3.OkHttpClient
import org.koin.android.ext.koin.androidContext
import org.koin.core.qualifier.named
import org.koin.dsl.bind
import org.koin.dsl.module
import java.util.concurrent.TimeUnit

val networkModule
    get() = module {
        single { AndroidCookieJar() } bind CookieJar::class
        single(named(CacheUtils.QUALIFIER_HTTP)) { CacheUtils.createHttpCache(androidContext()) }
        single {
            OkHttpClient.Builder().apply {
                if (AppSettings(get()).dnsClient == DnsClientType.CLOUDFLARE) dnsCloudflare()
                else if (AppSettings(get()).dnsClient == DnsClientType.GOOGLE) dnsGoogle()
                connectTimeout(20, TimeUnit.SECONDS)
                readTimeout(60, TimeUnit.SECONDS)
                writeTimeout(20, TimeUnit.SECONDS)
                cookieJar(get())
                cache(get(named(CacheUtils.QUALIFIER_HTTP)))
                addInterceptor(UserAgentInterceptor(androidContext()))
                if (BuildConfig.DEBUG) {
                    addNetworkInterceptor(CurlLoggingInterceptor())
                }
            }.build()
        }
    }