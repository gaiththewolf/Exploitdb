package com.dev.wolf.exploit_db.ui.detail.ui

import android.content.ActivityNotFoundException
import android.content.Context
import android.content.Intent
import android.content.res.Configuration
import android.net.Uri
import android.os.Bundle
import android.util.Log
import android.view.Menu
import android.view.MenuItem
import android.widget.Toast
import androidx.core.graphics.Insets
import androidx.core.view.isVisible
import androidx.core.view.updatePadding
import br.tiagohm.codeview.CodeView
import br.tiagohm.codeview.Language
import br.tiagohm.codeview.Theme
import com.dev.wolf.exploit_db.R
import com.dev.wolf.exploit_db.base.BaseActivity
import com.dev.wolf.exploit_db.base.domain.ExploitIntent
import com.dev.wolf.exploit_db.core.exceptions.ExploitNotFoundException
import com.dev.wolf.exploit_db.core.model.Exploit
import com.dev.wolf.exploit_db.core.prefs.AppSettings
import com.dev.wolf.exploit_db.databinding.ActivityExploitCodeBinding
import com.dev.wolf.exploit_db.utils.ShareHelper
import com.dev.wolf.exploit_db.utils.ext.copyToClipboard
import com.dev.wolf.exploit_db.utils.ext.fromHTML
import kotlinx.coroutines.MainScope
import kotlinx.coroutines.launch
import org.koin.android.ext.android.inject

class ExploitCodeActivity : BaseActivity<ActivityExploitCodeBinding>(),
    CodeView.OnHighlightListener  {

    private val appSettings by inject<AppSettings>()
    private var exploit : Exploit? = null

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(ActivityExploitCodeBinding.inflate(layoutInflater))
        val bundle = intent.extras ?: throw ExploitNotFoundException("Error bundle extras")
        exploit = bundle.getParcelable(ExploitIntent.KEY_EXPLOIT)
            ?: throw ExploitNotFoundException("Error exploit bundle")
        supportActionBar?.run {
            setDisplayHomeAsUpEnabled(true)
            title = getString(R.string.exploit_code_title)
            subtitle = exploit?.title?.fromHTML()
            setHomeAsUpIndicator(R.drawable.ic_cross)
        }
        val themeName = when (resources?.configuration?.uiMode?.and(Configuration.UI_MODE_NIGHT_MASK)) {
            Configuration.UI_MODE_NIGHT_YES -> {appSettings.codeViewDarkTheme}
            Configuration.UI_MODE_NIGHT_NO -> {appSettings.codeViewLightTheme}
            else -> {appSettings.codeViewLightTheme}
        }
        with(binding.codeView){
            code = exploit?.code
            isZoomEnabled = appSettings.codeViewZoom
            theme = Theme(themeName)
            language = getCodeLang(exploit?.code_lang.orEmpty())
            isWrapLine = appSettings.codeViewWrapLine
            isShowLineNumber = appSettings.codeViewLineNumber
            setOnHighlightListener(this@ExploitCodeActivity)
            apply()
        }
    }

    override fun onWindowInsetsChanged(insets: Insets) {
        binding.appbar.updatePadding(top = insets.top)
        binding.codeView.updatePadding(bottom = insets.bottom)
    }

    override fun onStartCodeHighlight() {
        MainScope().launch {
            binding.progressBar.isVisible = true
        }
    }

    override fun onFinishCodeHighlight() {
        MainScope().launch {
            binding.progressBar.isVisible = false
        }
    }

    override fun onLanguageDetected(language: Language?, relevance: Int) {
        MainScope().launch {
            supportActionBar?.title = getString(R.string.exploit_code_title_s, language?.name)
        }
    }

    override fun onFontSizeChanged(sizeInPx: Int) = Unit

    override fun onLineClicked(lineNumber: Int, content: String?) = Unit

    override fun onCreateOptionsMenu(menu: Menu): Boolean {
        menuInflater.inflate(R.menu.opt_exploit_code, menu)
        return super.onCreateOptionsMenu(menu)
    }

    override fun onOptionsItemSelected(item: MenuItem): Boolean = when (item.itemId) {
        android.R.id.home -> {
            binding.codeView.stopLoading()
            finishAfterTransition()
            true
        }
        R.id.action_code_browser -> {
            val intent = Intent(Intent.ACTION_VIEW)
            intent.data = Uri.parse(exploit?.codeUrl())
            try {
                startActivity(Intent.createChooser(intent, item.title))
            } catch (_: ActivityNotFoundException) {
            }
            true
        }
        R.id.action_exploit_browser -> {
            val intent = Intent(Intent.ACTION_VIEW)
            intent.data = Uri.parse(exploit?.exploitUrl())
            try {
                startActivity(Intent.createChooser(intent, item.title))
            } catch (_: ActivityNotFoundException) {
            }
            true
        }
        R.id.action_save -> {
            val intent = Intent(Intent.ACTION_VIEW)
            intent.data = Uri.parse(exploit?.downloadUrl())
            try {
                startActivity(Intent.createChooser(intent, item.title))
            } catch (_: ActivityNotFoundException) {
            }
            true
        }
        R.id.action_share -> {
            if (!exploit?.edb_id.isNullOrEmpty())
                ShareHelper(this).shareExploitLink(exploit!!)
            true
        }
        R.id.action_copy -> {
            if (!exploit?.edb_id.isNullOrEmpty()) {
                val res = this.copyToClipboard(exploit?.code.toString())
                if (res)
                    Toast.makeText(this, getString(R.string.copied_to_clipboard),
                        Toast.LENGTH_SHORT
                    ).show()
                else
                    Toast.makeText(this, getString(R.string.error_occurred),
                        Toast.LENGTH_SHORT
                    ).show()
            }
            true
        }
        else -> super.onOptionsItemSelected(item)
    }

    private fun getCodeLang(ext : String) : Language {
        val language = when(ext.lowercase()){
            "py" -> Language.PYTHON
            "rb","rbw","erb","rjs" -> Language.RUBY
            "bat" -> Language.BASH
            "scpt" -> Language.APPLESCRIPT
            "cmake" -> Language.CMAKE
            "coffee","litcoffee" -> Language.COFFEESCRIPT
            "cpp" -> Language.CPP
            "cs" -> Language.C_SHARP
            "css" -> Language.CSS
            "scss" -> Language.SCSS
            "dart" -> Language.DART
            "php" -> Language.PHP
            "vbs" -> Language.VBSCRIPT
            "vb" -> Language.VB_NET
            "html", "htm" -> Language.HTML
            "java" -> Language.JAVA
            "js" -> Language.JAVASCRIPT
            "kt" -> Language.KOTLIN
            "json" -> Language.JSON
            "pl" -> Language.PERL
            "ps1","ps1xml" -> Language.POWERSHELL
            "sql" -> Language.SQL
            "yml" -> Language.YAML
            "vhd","vhdl","vho","vht" -> Language.VHDL
            "xml" -> Language.XML
            else -> Language.AUTO
        }
        supportActionBar?.title = getString(R.string.exploit_code_title_s, language.name)
        return language
    }

    companion object {

        fun newIntent(context: Context, exploit: Exploit): Intent {
            return Intent(context, ExploitCodeActivity::class.java)
                .putExtra(ExploitIntent.KEY_EXPLOIT, exploit)
        }
    }
}
