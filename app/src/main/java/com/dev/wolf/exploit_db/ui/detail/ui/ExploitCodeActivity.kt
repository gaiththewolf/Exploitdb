package com.dev.wolf.exploit_db.ui.detail.ui

import android.content.Context
import android.content.Intent
import android.os.Bundle
import android.util.Log
import androidx.core.graphics.Insets
import androidx.core.view.isVisible
import androidx.core.view.updatePadding
import br.tiagohm.codeview.CodeView
import br.tiagohm.codeview.Language
import br.tiagohm.codeview.Theme
import com.dev.wolf.exploit_db.R
import com.dev.wolf.exploit_db.base.BaseFullscreenActivity
import com.dev.wolf.exploit_db.base.domain.ExploitIntent
import com.dev.wolf.exploit_db.core.exceptions.ExploitNotFoundException
import com.dev.wolf.exploit_db.core.model.Exploit
import com.dev.wolf.exploit_db.databinding.ActivityExploitCodeBinding
import com.dev.wolf.exploit_db.utils.ext.fromHTML
import com.dev.wolf.exploit_db.utils.ext.orValue
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.MainScope
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import org.koin.core.instance.getArguments

class ExploitCodeActivity : BaseFullscreenActivity<ActivityExploitCodeBinding>(), CodeView.OnHighlightListener  {

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(ActivityExploitCodeBinding.inflate(layoutInflater))
        val bundle = intent.extras ?: throw ExploitNotFoundException("Error bundle extras")
        val exploitBundle = bundle.getParcelable<Exploit>(ExploitIntent.KEY_EXPLOIT) ?: throw ExploitNotFoundException("Error exploit bundle")
        Log.d("Exploit_db_site1", exploitBundle.toString())
        supportActionBar?.run {
            setDisplayHomeAsUpEnabled(true)
            title = "Exploit code"
            subtitle = exploitBundle.title.fromHTML()
            setHomeAsUpIndicator(R.drawable.ic_cross)
        }
        with(binding.codeView){
            code = exploitBundle.code
            isZoomEnabled = true
            theme = Theme.GITHUB
            language = Language.AUTO
            isWrapLine = false
            isShowLineNumber = true
            setOnHighlightListener(this@ExploitCodeActivity)
            apply()
        }
    }

    override fun onWindowInsetsChanged(insets: Insets) {
        binding.appbar.updatePadding(top = insets.top)
        binding.codeView.updatePadding(bottom = insets.bottom)
    }

    override fun onStartCodeHighlight() {
        MainScope().launch {
            binding.progressBar.isVisible = true
        }
    }

    override fun onFinishCodeHighlight() {
        MainScope().launch {
            binding.progressBar.isVisible = false
        }
    }

    override fun onLanguageDetected(language: Language?, relevance: Int) {
        MainScope().launch {
            supportActionBar?.title = "$title - $language".fromHTML()
        }
    }

    override fun onFontSizeChanged(sizeInPx: Int) = Unit

    override fun onLineClicked(lineNumber: Int, content: String?) = Unit

    companion object {

        fun newIntent(context: Context, exploit: Exploit): Intent {
            return Intent(context, ExploitCodeActivity::class.java)
                .putExtra(ExploitIntent.KEY_EXPLOIT, exploit)
        }
    }
}