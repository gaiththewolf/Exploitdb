package com.dev.wolf.exploit_db.ui.detail.ui

import android.content.ActivityNotFoundException
import android.content.Context
import android.content.Intent
import android.net.Uri
import android.os.Bundle
import android.util.Log
import android.view.Menu
import android.view.MenuItem
import androidx.core.graphics.Insets
import androidx.core.view.isVisible
import androidx.core.view.updatePadding
import br.tiagohm.codeview.CodeView
import br.tiagohm.codeview.Language
import br.tiagohm.codeview.Theme
import com.dev.wolf.exploit_db.R
import com.dev.wolf.exploit_db.base.BaseActivity
import com.dev.wolf.exploit_db.base.domain.ExploitIntent
import com.dev.wolf.exploit_db.core.exceptions.ExploitNotFoundException
import com.dev.wolf.exploit_db.core.model.Exploit
import com.dev.wolf.exploit_db.databinding.ActivityExploitCodeBinding
import com.dev.wolf.exploit_db.utils.ext.fromHTML
import kotlinx.coroutines.MainScope
import kotlinx.coroutines.launch

class ExploitCodeActivity : BaseActivity<ActivityExploitCodeBinding>(),
    CodeView.OnHighlightListener  {

    private var exploit : Exploit? = null

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(ActivityExploitCodeBinding.inflate(layoutInflater))
        val bundle = intent.extras ?: throw ExploitNotFoundException("Error bundle extras")
        exploit = bundle.getParcelable(ExploitIntent.KEY_EXPLOIT)
            ?: throw ExploitNotFoundException("Error exploit bundle")
        supportActionBar?.run {
            setDisplayHomeAsUpEnabled(true)
            title = getString(R.string.exploit_code_title)
            subtitle = exploit?.title?.fromHTML()
            setHomeAsUpIndicator(R.drawable.ic_cross)
        }
        with(binding.codeView){
            code = exploit?.code
            isZoomEnabled = true
            theme = Theme.GITHUB
            language = Language.AUTO
            isWrapLine = false
            isShowLineNumber = true
            setOnHighlightListener(this@ExploitCodeActivity)
            apply()
        }
    }

    override fun onWindowInsetsChanged(insets: Insets) {
        binding.appbar.updatePadding(top = insets.top)
        binding.codeView.updatePadding(bottom = insets.bottom)
    }

    override fun onStartCodeHighlight() {
        MainScope().launch {
            binding.progressBar.isVisible = true
        }
    }

    override fun onFinishCodeHighlight() {
        MainScope().launch {
            binding.progressBar.isVisible = false
        }
    }

    override fun onLanguageDetected(language: Language?, relevance: Int) {
        MainScope().launch {
            supportActionBar?.title = getString(R.string.exploit_code_title_s, language?.name)
        }
    }

    override fun onFontSizeChanged(sizeInPx: Int) = Unit

    override fun onLineClicked(lineNumber: Int, content: String?) = Unit

    override fun onCreateOptionsMenu(menu: Menu): Boolean {
        menuInflater.inflate(R.menu.opt_exploit_code, menu)
        return super.onCreateOptionsMenu(menu)
    }

    override fun onOptionsItemSelected(item: MenuItem): Boolean = when (item.itemId) {
        android.R.id.home -> {
            binding.codeView.stopLoading()
            finishAfterTransition()
            true
        }
        R.id.action_code_browser -> {
            val intent = Intent(Intent.ACTION_VIEW)
            intent.data = Uri.parse(exploit?.url)
            try {
                startActivity(Intent.createChooser(intent, item.title))
            } catch (_: ActivityNotFoundException) {
            }
            true
        }
        else -> super.onOptionsItemSelected(item)
    }


    companion object {

        fun newIntent(context: Context, exploit: Exploit): Intent {
            return Intent(context, ExploitCodeActivity::class.java)
                .putExtra(ExploitIntent.KEY_EXPLOIT, exploit)
        }
    }
}
