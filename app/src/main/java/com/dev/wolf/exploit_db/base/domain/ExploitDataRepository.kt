package com.dev.wolf.exploit_db.base.domain

import androidx.room.withTransaction
import com.dev.wolf.exploit_db.core.database.ExploitDatabase
import com.dev.wolf.exploit_db.core.database.entity.CveEntity
import com.dev.wolf.exploit_db.core.database.entity.ExploitEntity
import com.dev.wolf.exploit_db.core.database.entity.TagEntity
import com.dev.wolf.exploit_db.core.model.Exploit
import com.dev.wolf.exploit_db.utils.ext.mapItems
import com.dev.wolf.exploit_db.utils.ext.mapToSet
import kotlinx.coroutines.flow.Flow

class ExploitDataRepository(private val db: ExploitDatabase) {

    suspend fun findExploitById(exploitId: Long): Exploit? {
        return db.exploitDao.find(exploitId)?.toExploit()
    }

    suspend fun getAllExploit(): List<Exploit> {
        return db.exploitDao.findAll().map {
            it.exploit.toExploit(
                it.tags.mapToSet(TagEntity::toTag),
                it.cves.mapToSet(CveEntity::toCVE)
            )
        }
    }

    fun observeAll(): Flow<List<Exploit>> {
        return db.exploitDao.observeAll()
            .mapItems {
                it.exploit.toExploit(
                    it.tags.mapToSet(TagEntity::toTag),
                    it.cves.mapToSet(CveEntity::toCVE)
                )
            }
    }

    suspend fun removeFromStore(exploit: Exploit) {
        db.exploitDao.delete(exploit.id)
    }

    suspend fun resolveIntent(intent: ExploitIntent): Exploit? = when {
        intent.exploit != null -> intent.exploit
        intent.exploitId != ExploitIntent.ID_NONE -> db.exploitDao.find(intent.exploitId)?.toExploit()
        else -> null // TODO resolve uri
    }

    suspend fun storeExploit(exploit: Exploit) {
        val tags = exploit.tags.map(TagEntity.Companion::fromTag)
        val cves = exploit.cve.map(CveEntity.Companion::fromCVE)
        db.withTransaction {
            db.tagsDao.upsert(tags)
            db.cvesDao.upsert(cves)
            db.exploitDao.upsert(ExploitEntity.from(exploit), tags, cves)
        }
    }
}