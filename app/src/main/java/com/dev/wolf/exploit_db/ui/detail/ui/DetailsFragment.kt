package com.dev.wolf.exploit_db.ui.detail.ui

import android.os.Bundle
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import androidx.core.content.ContextCompat
import androidx.core.view.isVisible
import androidx.core.view.updatePadding
import com.dev.wolf.exploit_db.R
import com.dev.wolf.exploit_db.base.BaseFragment
import com.dev.wolf.exploit_db.core.model.Exploit
import com.dev.wolf.exploit_db.databinding.FragmentDetailsBinding
import com.dev.wolf.exploit_db.utils.ext.orValue
import com.dev.wolf.exploit_db.utils.ext.textAndVisible
import com.dev.wolf.exploit_db.utils.ext.toLocalDate
import org.koin.androidx.viewmodel.ext.android.sharedViewModel
import androidx.core.graphics.Insets
import com.dev.wolf.exploit_db.base.widgets.ChipsView
import com.dev.wolf.exploit_db.utils.ext.fromHTML

class DetailsFragment : BaseFragment<FragmentDetailsBinding>(), View.OnClickListener {

    private val viewModel by sharedViewModel<DetailsViewModel>()

    override fun onInflateView(
        inflater: LayoutInflater,
        container: ViewGroup?
    ) = FragmentDetailsBinding.inflate(inflater, container, false)

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)
        viewModel.exploit.observe(viewLifecycleOwner, ::onExploitUpdated)
        viewModel.isLoading.observe(viewLifecycleOwner, ::onLoadingStateChanged)
    }

    private fun onLoadingStateChanged(isLoading: Boolean) {
        if (isLoading) {
            binding.progressBar.show()
        } else {
            binding.progressBar.hide()
        }
    }

    private fun onExploitUpdated(exploit: Exploit) {
        with(binding) {
            textViewTitle.text = exploit.title.fromHTML()
            textViewDate.textAndVisible = exploit.createdAt.toLocalDate()
            textViewAuthor.textAndVisible = exploit.author
            textViewAuthor.text = exploit.author
            textViewEdbId.text = exploit.edb_id
            textViewPlatform.textAndVisible = exploit.platform?.title
            textViewType.textAndVisible = exploit.type?.title

            if (exploit.port != null)
                textViewPort.textAndVisible = exploit.port.title
            else
                portContainer.isVisible = false

            if (exploit.isVerified)
                imageViewVerified.setImageDrawable(ContextCompat.getDrawable(requireContext(), R.drawable.ic_verified))
            else
                imageViewVerified.setImageDrawable(ContextCompat.getDrawable(requireContext(), R.drawable.ic_not_verified))

            if (exploit.isApplication.first){
                textViewAppName.textAndVisible = exploit.isApplication.second
            }else
                appContainer.isVisible = false

            //buttonFavorite.setOnClickListener(this@DetailsFragment)
            bindTagsAndCve(exploit)
        }
    }

    override fun onWindowInsetsChanged(insets: Insets) {
        binding.root.updatePadding(
            left = insets.left,
            right = insets.right,
            bottom = insets.bottom
        )
    }

    private fun bindTagsAndCve(exploit: Exploit) {
        binding.chipsTags.setChips(
            exploit.tags.map { tag ->
                ChipsView.ChipModel(
                    title = tag.title,
                    icon = 0
                )
            }
        )
        binding.chipsCve.setChips(
            exploit.cve.map { cve ->
                ChipsView.ChipModel(
                    title = cve.code,
                    icon = 0
                )
            }
        )
    }

    override fun onClick(p0: View?) = Unit
}